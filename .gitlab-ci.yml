stages:
  - build
  - lint
  - test
  - push

# Use Docker image with Docker CLI pre-installed
image: docker:20.10.16

# Use Docker-in-Docker service to enable Docker commands
services:
  - docker:20.10.16-dind

# Define environment variables for Docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA # Use short commit hash as the image tag
  NODE_MODULES_CACHE_KEY: ${CI_COMMIT_REF_SLUG}
  DOCKER_BUILDKIT: "1"  # Enable BuildKit for better caching
  DOCKER_TLS_CERTDIR: ""  # Fix for DinD

cache: &global_cache
  key: ${NODE_MODULES_CACHE_KEY}
  paths:
    - client/node_modules/
    - server/node_modules/
  policy: pull-push

# Include GitLab's built-in SAST template
include:
  - template: Security/SAST.gitlab-ci.yml

# Add SAST configuration
sast:
  stage: test
  variables:
    SAST_EXCLUDED_PATHS: "spec, test, tests, tmp"
    SCAN_KUBERNETES_MANIFESTS: "false"
  before_script: []  # Override the global before_script
  script:
    - /analyzer run
  dependencies: []
  artifacts:
    reports:
      sast: gl-sast-report.json

# Authenticate with Docker Hub
before_script:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker info # Validate Docker environment

# Build Client Container
build_client:
  stage: build
  script:
    - cd client
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-client:latest .
    - docker images 
  cache:
    <<: *global_cache
    policy: pull-push
  only:
    - main
    - merge_requests
  rules:
    - !reference [.default_rules, rules]

# Build Server Container
build_server:
  stage: build
  script:
    - cd server
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-server:latest .
    - docker images 
  cache:
    <<: *global_cache
    policy: pull-push
  only:
    - main
    - merge_requests
  rules:
    - !reference [.default_rules, rules]

# Run Linting
lint_code:
  stage: lint
  image: node:16 # Node.js image for npm and eslint
  services:
    - name: docker:20.10.16-dind # Docker service for Docker commands
      alias: docker # Alias for Docker service
  before_script:
    - apt-get update && apt-get install -y docker.io # Install Docker CLI
  script:
    - export DOCKER_CLI_EXPERIMENTAL=enabled # Enable experimental features for Docker CLI
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin # Docker login
    - npm install eslint
    # - npx eslint client --config eslint.config.js
    # - cd ../server && npx eslint .
  cache:
    <<: *global_cache
    policy: pull
  only:
    - main
    - merge_requests
  timeout: 30m
  rules:
    - !reference [.default_rules, rules]

# Run Unit Tests
unit_tests:
  stage: test
  script:
    # Run Unit Tests for Client
    - cd client
    - docker run --rm $DOCKER_USERNAME/ecoommerce-application-client:latest npm test || echo "No tests found in client."
    # Run Unit Tests for Server
    - cd ../server
    - docker run --rm $DOCKER_USERNAME/ecoommerce-application-server:latest npm test || echo "No tests found in server."
  artifacts:
    when: always
    paths:
      - client/test-results.xml
      - server/test-results.xml
  only:
    - main
    - merge_requests
  needs:
    - build_client
    - build_server
  rules:
    - !reference [.default_rules, rules]

# Push Docker Images to Docker Hub
push_images:
  stage: push
  script:
    - cd client
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-client:latest .
    - docker push $DOCKER_USERNAME/ecoommerce-application-client:latest
    
    - cd ../server
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-server:latest .
    - docker push $DOCKER_USERNAME/ecoommerce-application-server:latest
  only:
    - main
    - merge_requests
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  needs:
    - unit_tests
  rules:
    - !reference [.default_rules, rules]

default:
  timeout: 1h
  rules:
    - !reference [.default_rules, rules]

.default_rules: &default_rules
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
