stages:
  - build
  - lint
  - test
  - push

# Use Docker image with Docker CLI pre-installed
image: docker:20.10.16

# Use Docker-in-Docker service to enable Docker commands
services:
  - docker:20.10.16-dind

# Define environment variables for Docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA # Use short commit hash as the image tag

# Include GitLab's built-in SAST template
include:
  - template: Security/SAST.gitlab-ci.yml

# Authenticate with Docker Hub
before_script:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker info # Validate Docker environment

# Build Client Container
build_client:
  stage: build
  script:
    - cd client
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-client:latest .
    - docker images 
  cache:
    paths:
      - client/node_modules
  only:
    - main
    - merge_requests

# Build Server Container
build_server:
  stage: build
  script:
    - cd server
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-server:latest .
    - docker images 
  cache:
    paths:
      - server/node_modules
  only:
    - main
    - merge_request

# Run Linting
lint_code:
  stage: lint
  image: node:16 # Node.js image for npm and eslint
  services:
    - name: docker:20.10.16-dind # Docker service for Docker commands
      alias: docker # Alias for Docker service
  before_script:
    - apt-get update && apt-get install -y docker.io # Install Docker CLI
  script:
    - export DOCKER_CLI_EXPERIMENTAL=enabled # Enable experimental features for Docker CLI
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin # Docker login
    - npm install eslint
    # - npx eslint client --config eslint.config.js
    # - cd ../server && npx eslint .
  cache:
    paths:
      - client/node_modules
      - server/node_modules
  only:
    - main
    - merge_requests

# Run Unit Tests
unit_tests:
  stage: test
  script:
    # Run Unit Tests for Client
    - cd client
    - docker run --rm $DOCKER_USERNAME/ecoommerce-application-client:latest npm test || echo "No tests found in client."
    # Run Unit Tests for Server
    - cd ../server
    - docker run --rm $DOCKER_USERNAME/ecoommerce-application-server:latest npm test || echo "No tests found in server."
  artifacts:
    when: always
    paths:
      - client/test-results.xml
      - server/test-results.xml
  only:
    - main
    - merge_requests

# Push Docker Images to Docker Hub
push_images:
  stage: push
  script:
    - cd client
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-client:latest .
    - docker push $DOCKER_USERNAME/ecoommerce-application-client:latest
    
    - cd ../server
    - docker build -t $DOCKER_USERNAME/ecoommerce-application-server:latest .
    - docker push $DOCKER_USERNAME/ecoommerce-application-server:latest
  only:
    - main
    - merge_requests
