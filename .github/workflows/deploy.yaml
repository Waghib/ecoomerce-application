name: "CI/CD Pipeline for E-commerce App"
on:
  push:
    branches:
      - main
      - workflows

jobs:
  # Code Testing Job
  code-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Add language-specific setup steps if needed
      # Example for Node.js (backend):
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      # Run frontend and backend tests (add more as needed)
      - name: Run Backend Tests
        working-directory: .../server
        run: npm install && npm test

      - name: Run Frontend Tests
        working-directory: .../client
        run: npm install && npm test

  # Build and Push Docker Images Job
  build-and-push:
    runs-on: ubuntu-latest
    needs: code-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Backend Docker Image
        working-directory: .../server
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest

      - name: Build and Push Frontend Docker Image
        working-directory: .../client
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:latest

  # Deploy to Kubernetes
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v2
        with:
          version: 'latest'
      
      - name: Configure K8s Cluster Context
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
      
      - name: Apply Kubernetes Manifests
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          kubectl apply -f k8s-manifests/
