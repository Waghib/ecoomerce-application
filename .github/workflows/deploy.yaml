name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1. Docker Build Jobs for Frontend and Backend
  build-frontend:
    name: Build Frontend Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:${{ github.sha }} -f frontend/Dockerfile frontend/
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:${{ github.sha }}

  build-backend:
    name: Build Backend Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Backend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:${{ github.sha }} -f backend/Dockerfile backend/
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:${{ github.sha }}

  # 2. Run Unit Tests
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Frontend Unit Tests
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:${{ github.sha }} npm test

      - name: Run Backend Unit Tests
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:${{ github.sha }} npm test

  # 3. Run Linter
  linter:
    name: Run Linter
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Linter
        run: |
          npm install -g eslint
          eslint frontend/ backend/

  # 4. Run SAST
  sast:
    name: Run Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    needs: [linter]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Semgrep SAST Analysis
        run: |
          pip install semgrep
          semgrep --config=auto frontend/ backend/

  # 5. Docker Push (Production Tags)
  push-images:
    name: Push Images to DockerHub
    runs-on: ubuntu-latest
    needs: [sast]
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Frontend Docker Image with Production Tag
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-frontend:latest

      - name: Push Backend Docker Image with Production Tag
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-backend:latest
